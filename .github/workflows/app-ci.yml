name: Test and Build  Memory Web App
env:
  APP_NAME: memory  # Set this to the name of your Azure 
on:
  push:
    branches: [ develop ]  # Replace with your default branch
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-memory:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Check images in data folder
        run: |
          for file in $(find ./html/data -name "*.jpg"); do
            echo "Checking image $file"
            
            # Check if the file is a valid JPEG
            if file "$file" | grep -q 'JPEG image data'; then
              echo "$file is a valid JPEG"
            else
              echo "::error file=$file:: $file is not a valid JPEG"
              exit 1 # Fail the pipeline if the file is not a JPEG
            fi
          done

  build:
    runs-on: self-hosted
    needs: 
      - test-memory
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USER }}/${{ env.APP_NAME }}:latest -f Dockerfile .
          

  push:
    runs-on: self-hosted
    needs: 
      - test-memory
      - build
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Push container to docker hub container
        run: |
          docker push ${{ secrets.DOCKER_USER }}/${{ env.APP_NAME }}:latest

      
  deploy-memory:
    runs-on: self-hosted
    needs: 
      - test-memory
      - build
      - push
    steps:
      - uses: actions/checkout@v4

      - name: Connect in ssh to host
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pull image from docker hub
        run: |
          docker pull ${{ secrets.DOCKER_USER }}/${{ env.APP_NAME }}:latest
      - name: Run container
        run: |
          docker run -d -p 80:80 ${{ secrets.DOCKER_USER }}/${{ env.APP_NAME }}:latest

      